name: download-and-extract

on:
  workflow_dispatch:
    inputs:
      downloadAll:
        description: 'Force download all (1)'
        default: '0'

jobs:
  download-assets:
    name: Download and extract assets
    env:
      USER_NAME: anothereideeznuts
      USER_EMAIL: another.eidos.cgs@gmail.com
      BUNDLES_DIR: bundles
      ARTIFACTS_DIR: artifacts
      ARTIFACTS_RIPPER_DIR: ripper-output
      ASSET_RIPPER_VERSION: "0.3.4.0"
      FINISH_INDICATOR: done
      ARTIFACTS_BRANCH: netlify-artifacts
      BUNDLE_COUNT: '0'
    runs-on: windows-2019
    strategy:
      matrix:
        node-version: [22.13.1]
        python-version: [3.13.1]
    steps:
      - uses: actions/checkout@v4.2.2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4.2.0
        with:
          node-version: ${{ matrix.node-version }}

      - name: Installation
        run: |
          npx yarn install

      - name: Download official bundles
        id: bundles
        run: |
          New-Item -Path . -Name ${env:BUNDLES_DIR} -ItemType directory
          $env:DOWNLOAD_ALL = "${{ github.event.inputs.downloadAll }}"
          npm run download:bundles
          $env:BUNDLE_COUNT = (Get-ChildItem ${env:BUNDLES_DIR} | Measure-Object).Count
          Write-Output "BUNDLE_COUNT: ${env:BUNDLE_COUNT}"
          Write-Output "BUNDLE_COUNT=${env:BUNDLE_COUNT}" >> ${env:GITHUB_ENV}

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5.4.0
        if: env.BUNDLE_COUNT != '0'
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Extract bundles
        if: env.BUNDLE_COUNT != '0'
        run: |
          python -m pip install -r requirements.txt
          python extract.py ${env:BUNDLES_DIR} ${env:ARTIFACTS_DIR}

      - name: Extract bundles (AssetRipper)
        if: env.BUNDLE_COUNT != '0'
        run: |
          cmd /c "curl.exe -L https://github.com/AssetRipper/AssetRipper/releases/download/${env:ASSET_RIPPER_VERSION}/AssetRipper_win_x64.zip > AssetRipper.zip"
          Expand-Archive AssetRipper.zip AssetRipper
          .\AssetRipper\AssetRipper.exe ${env:BUNDLES_DIR} -o ${env:ARTIFACTS_RIPPER_DIR} -q
          (dir -r ${env:ARTIFACTS_RIPPER_DIR}).FullName

      - name: Filter assets
        if: env.BUNDLE_COUNT != '0'
        run: |
          npm run remove:duplicated-assets -- ${env:ARTIFACTS_DIR}

      - name: Process JSON files
        if: env.BUNDLE_COUNT != '0'
        run: |
          python -m pip install Pillow
          python preprocess.py

      - name: Oragnize artifacts
        if: env.BUNDLE_COUNT != '0'
        run: |
          Move-Item ${env:ARTIFACTS_DIR}\* . -Force

          New-Item Book -ItemType directory -Force
          New-Item Texture2D -ItemType directory -Force
          New-Item VideoClip -ItemType directory -Force

          Move-Item MonoBehaviour\* Book -Include *.book.json,*.chapter.json -Force
          Get-ChildItem ${env:ARTIFACTS_RIPPER_DIR}\ExportedProject\Assets\UAnados\Resources_moved\Texture\Sprite\* -Include *.mp4 -Recurse | Move-Item -Destination VideoClip -Force
          Move-Item ${env:ARTIFACTS_RIPPER_DIR}\ExportedProject\Assets\Texture2D\*.png .\Texture2D -Force

      - name: Clean up unnecessary files
        if: env.BUNDLE_COUNT != '0'
        run: |
          Remove-Item AssetRipper.zip -Force
          Remove-Item ${env:BUNDLES_DIR} -Recurse -Force
          Remove-Item ${env:ARTIFACTS_DIR} -Recurse -Force
          Remove-Item ${env:ARTIFACTS_RIPPER_DIR} -Recurse -Force
          Remove-Item TextAsset -Recurse -Force
